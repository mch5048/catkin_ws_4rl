# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gazebo_ext_msgs/SetSkyPropertiesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SetSkyPropertiesRequest(genpy.Message):
  _md5sum = "ed25a3f6c62317b873911c0baf6969fe"
  _type = "gazebo_ext_msgs/SetSkyPropertiesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 time
float64 sunrise
float64 sunset
float64 wind_speed
float64 wind_direction
std_msgs/ColorRGBA cloud_ambient
float64 humidity
float64 mean_cloud_size

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['time','sunrise','sunset','wind_speed','wind_direction','cloud_ambient','humidity','mean_cloud_size']
  _slot_types = ['float64','float64','float64','float64','float64','std_msgs/ColorRGBA','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,sunrise,sunset,wind_speed,wind_direction,cloud_ambient,humidity,mean_cloud_size

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetSkyPropertiesRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0.
      if self.sunrise is None:
        self.sunrise = 0.
      if self.sunset is None:
        self.sunset = 0.
      if self.wind_speed is None:
        self.wind_speed = 0.
      if self.wind_direction is None:
        self.wind_direction = 0.
      if self.cloud_ambient is None:
        self.cloud_ambient = std_msgs.msg.ColorRGBA()
      if self.humidity is None:
        self.humidity = 0.
      if self.mean_cloud_size is None:
        self.mean_cloud_size = 0.
    else:
      self.time = 0.
      self.sunrise = 0.
      self.sunset = 0.
      self.wind_speed = 0.
      self.wind_direction = 0.
      self.cloud_ambient = std_msgs.msg.ColorRGBA()
      self.humidity = 0.
      self.mean_cloud_size = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5d4f2d().pack(_x.time, _x.sunrise, _x.sunset, _x.wind_speed, _x.wind_direction, _x.cloud_ambient.r, _x.cloud_ambient.g, _x.cloud_ambient.b, _x.cloud_ambient.a, _x.humidity, _x.mean_cloud_size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cloud_ambient is None:
        self.cloud_ambient = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.time, _x.sunrise, _x.sunset, _x.wind_speed, _x.wind_direction, _x.cloud_ambient.r, _x.cloud_ambient.g, _x.cloud_ambient.b, _x.cloud_ambient.a, _x.humidity, _x.mean_cloud_size,) = _get_struct_5d4f2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5d4f2d().pack(_x.time, _x.sunrise, _x.sunset, _x.wind_speed, _x.wind_direction, _x.cloud_ambient.r, _x.cloud_ambient.g, _x.cloud_ambient.b, _x.cloud_ambient.a, _x.humidity, _x.mean_cloud_size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cloud_ambient is None:
        self.cloud_ambient = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.time, _x.sunrise, _x.sunset, _x.wind_speed, _x.wind_direction, _x.cloud_ambient.r, _x.cloud_ambient.g, _x.cloud_ambient.b, _x.cloud_ambient.a, _x.humidity, _x.mean_cloud_size,) = _get_struct_5d4f2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d4f2d = None
def _get_struct_5d4f2d():
    global _struct_5d4f2d
    if _struct_5d4f2d is None:
        _struct_5d4f2d = struct.Struct("<5d4f2d")
    return _struct_5d4f2d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gazebo_ext_msgs/SetSkyPropertiesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetSkyPropertiesResponse(genpy.Message):
  _md5sum = "2ec6f3eff0161f4257b808b12bc830c2"
  _type = "gazebo_ext_msgs/SetSkyPropertiesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success
string status_message

"""
  __slots__ = ['success','status_message']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,status_message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetSkyPropertiesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.status_message is None:
        self.status_message = ''
    else:
      self.success = False
      self.status_message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
      _x = self.status_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status_message = str[start:end].decode('utf-8')
      else:
        self.status_message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
      _x = self.status_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status_message = str[start:end].decode('utf-8')
      else:
        self.status_message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetSkyProperties(object):
  _type          = 'gazebo_ext_msgs/SetSkyProperties'
  _md5sum = '58ab80a272655f0012daa4ccd6a59539'
  _request_class  = SetSkyPropertiesRequest
  _response_class = SetSkyPropertiesResponse
